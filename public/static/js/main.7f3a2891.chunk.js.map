{"version":3,"sources":["components/CustomersList.js","components/AddCustomer.js","components/EditCustomer.js","App.js","serviceWorker.js","index.js"],"names":["CUSTOMERS_LIST_QUERY","gql","_templateObject","DELETE_CUSTOMER","_templateObject2","CustomersList","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","_this","react_default","a","createElement","react","className","react_apollo_esm","query","_ref","loading","error","data","console","log","customers","map","customer","CustomersList_EachCustomer","id","editCustomer","props","Component","EachCustomer","_Component2","delete_id","_this$props$customer","name","email","age","onClick","bind","mutation","update","cache","_ref2","deleteCustomer","readQuery","writeQuery","filter","n","e","variables","ADD_CUSTOMER_QUERY","AddCustomer_templateObject","AddCustomer_templateObject2","AddCustomer","_getPrototypeOf2","_len","length","args","Array","_key","call","concat","state","onChange","setState","defineProperty","target","parseInt","_this2","_this$state","addCustomer","onSubmit","preventDefault","type","style","backgroundColor","border","padding","EditCustomer_templateObject","EDIT_CUSTOMER","EditCustomer_templateObject2","GET_CUSTOMER","_templateObject3","EditCustomer","editId","EditCustomer_EditForm","customerData","EditForm","forEach","item","client","ApolloClient","uri","App","editThisCustomer","window","scrollTo","components_AddCustomer","components_EditCustomer","components_CustomersList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7f3a2891.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\n\nconst CUSTOMERS_LIST_QUERY = gql`\n    query CustomersListQuery {\n        customers {\n            name\n            email\n            age\n            id\n        }\n    }\n`;\n\nconst DELETE_CUSTOMER = gql`\n    mutation DeleteCustomer($id: String!) {\n        deleteCustomer(id: $id) {\n            name\n            email\n            age\n            id\n        }\n    }\n`;\n\nexport class CustomersList extends Component {\n\n    render() {\n\n        return (\n            <Fragment>\n                <h1 className=\"display-4 my-3\">Customers</h1>\n                <Query query={CUSTOMERS_LIST_QUERY}>\n                {\n                    ({ loading, error, data }) => {\n                        if(loading) return <h4>Loading...</h4>;\n                        if(error) console.log(error);\n\n                        return <Fragment>\n                        {\n                            data.customers.map(customer => (\n                                <EachCustomer key={customer.id} customer={customer} editCustomer={this.props.editCustomer}/>\n                            ))\n                        }\n                        </Fragment>\n                    }\n                }\n                </Query>\n            </Fragment>\n        )\n\n    }\n\n}\n\nexport class EachCustomer extends Component {\n\n    render() {\n\n        const delete_id = {id: ''}\n\n        const { name, email, age, id } = this.props.customer\n\n        return(\n            <div className=\"card card-body mb-3 list-item\" id={id}>\n                <div className=\"row\">\n                    <div className=\"col-md-9\">\n                        <h4>Customer: { name }</h4>\n                        <p>Email: { email }</p>\n                        <p>Age: { age }</p>\n                    </div>\n                    <div className=\"col-md-3\">\n                    <button onClick={this.props.editCustomer.bind(this, id)} className=\"btn btn-secondary m-1 text-success\">Edit</button>\n                    <Mutation\n                        mutation={DELETE_CUSTOMER}\n                        update={(cache, { data: { deleteCustomer } }) => {\n                            const { customers } = cache.readQuery({ query: CUSTOMERS_LIST_QUERY });\n                            cache.writeQuery({\n                                query: CUSTOMERS_LIST_QUERY,\n                                data: { customers: customers.filter(n => n.id !== delete_id.id) },\n                            });\n                        }}\n                        >\n                    {(deleteCustomer) => (\n                        <button\n                            onClick={(e) => {\n                                delete_id.id = id\n                                deleteCustomer({ variables: { id } })\n                                }\n                            }\n                        className=\"btn btn-secondary m-1 text-danger\">Delete</button>\n                        )\n                    }\n                    </Mutation>\n                    </div>\n                </div>\n            </div>\n\n        )\n\n    }\n\n}\n\nexport default CustomersList;\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Mutation, Query } from 'react-apollo';\n\nconst ADD_CUSTOMER_QUERY = gql`\n    mutation AddCustomerQuery($name: String!, $email: String!, $age: Int!) {\n        addCustomer(name: $name, email: $email, age: $age) {\n            name\n            email\n            age\n            id\n        }\n    }\n`;\n\nconst CUSTOMERS_LIST_QUERY = gql`\n    query CustomersListQuery {\n        customers {\n            name\n            email\n            age\n            id\n        }\n    }\n`;\n\nexport class AddCustomer extends Component {\n\n    state = {\n        name: '',\n        email: '',\n        age: ''\n    }\n\n    onChange = (e) => this.setState({ [e.target.name]: e.target.name === \"age\" ? parseInt(e.target.value) : e.target.value });\n\n    render() {\n\n        const { name, email, age } = this.state;\n\n        return (\n            <Fragment>\n                <h1 className=\"display-4 my-3\">Add Customer</h1>\n                <div className=\"card card-body mb-3\">\n                <Mutation\n                    mutation={ADD_CUSTOMER_QUERY}\n                    update={(cache, { data: { addCustomer } }) => {\n                        const { customers } = cache.readQuery({ query: CUSTOMERS_LIST_QUERY });\n                        cache.writeQuery({\n                            query: CUSTOMERS_LIST_QUERY,\n                            data: { customers: customers.concat(addCustomer) },\n                            });\n                        }\n                    }\n                >\n                {(addCustomer) => (\n                    <form onSubmit={(e) => {\n                        e.preventDefault();\n                        addCustomer({ variables: { name, email, age } })\n                        this.setState({\n                            name: '',\n                            email: '',\n                            age: ''\n                        });\n                        }\n                    }\n                    className=\"row col-md-9\">\n                    <label>Name<br/>\n                        <input type=\"text\" value={this.state.name} onChange={this.onChange} name=\"name\" className=\"m-1\" style={{backgroundColor: '#888', border: 'none', padding: '.2rem'}}/>\n                    </label>\n                    <label>Email<br/>\n                        <input type=\"text\" value={this.state.email} onChange={this.onChange} name=\"email\" className=\"m-1\" style={{backgroundColor: '#888', border: 'none', padding: '.2rem'}}/>\n                    </label>\n                    <label>Age<br/>\n                        <input type=\"text\" value={this.state.age} onChange={this.onChange} name=\"age\" className=\"m-1\" style={{backgroundColor: '#888', border: 'none', padding: '.2rem'}}/>\n                    </label>\n                    <label><br/>\n                    <input type=\"submit\" value=\"Submit\" className=\"btn btn-secondary m-1 text-success\"/>\n                    </label>\n                    </form>\n                    )\n                }\n                </Mutation>\n                </div>\n            </Fragment>\n        )\n\n    }\n\n}\n\nexport default AddCustomer;\n","import React, { Component, Fragment } from 'react';\nimport gql from 'graphql-tag';\nimport { Mutation, Query } from 'react-apollo';\n\nconst CUSTOMERS_LIST_QUERY = gql`\n    query CustomersListQuery {\n        customers {\n            name\n            email\n            age\n            id\n        }\n    }\n`;\n\nconst EDIT_CUSTOMER = gql`\n    mutation editCustomer($name: String!, $email: String!, $age: Int!, $id: String!) {\n        editCustomer(name: $name, email: $email, age: $age, id: $id) {\n            name\n            email\n            age\n            id\n        }\n    }\n`;\n\nconst GET_CUSTOMER = gql`\n    query Customer($id: String!) {\n        customer(id: $id) {\n            name\n            email\n            age\n            id\n        }\n    }\n`;\n\nexport class EditCustomer extends Component {\n\n    render() {\n\n        const editCustomer = this.props.editId;\n        let id = editCustomer;\n\n        return(\n            <Fragment>\n                <h1 className=\"display-4 my-3\">Edit Customer</h1>\n                <Query query={GET_CUSTOMER} variables={{ id }}>\n                {\n                    ({ loading, error, data }) => {\n                        if(loading) return <h4>Loading...</h4>;\n                        if(error) console.log(error);\n\n                        return <EditForm customerData={data} />\n                    }\n                }\n                </Query>\n            </Fragment>\n        )\n    }\n}\n\nexport class EditForm extends Component {\n\n    constructor(props){\n        super();\n        this.state = {\n            name: props.customerData.customer.name,\n            email: props.customerData.customer.email,\n            age: props.customerData.customer.age,\n            id: props.customerData.customer.id\n        }\n\n    }\n\n    onChange = (e) => this.setState({ [e.target.name]: e.target.name === \"age\" ? parseInt(e.target.value) : e.target.value });\n\n    render() {\n\n        const { name, email, age, id } = this.state;\n\n        return(\n            <div className=\"card card-body mb-3\">\n                <Mutation\n                    mutation={EDIT_CUSTOMER}\n                    update={(cache, { data: { editCustomer } }) => {\n                        const { customers } = cache.readQuery({ query: CUSTOMERS_LIST_QUERY });\n\n                        customers.forEach(item => {\n                            if (item.id === id) {\n                                item = editCustomer\n                            }\n                        });\n\n                        cache.writeQuery({\n                            query: CUSTOMERS_LIST_QUERY,\n                            data: { customers: customers},\n                            });\n                        }\n                    }\n                >\n                {(editCustomer) => (\n                <form onSubmit={(e) => {\n                        e.preventDefault();\n                        editCustomer({ variables: { name, email, age, id } })\n                        this.setState({\n                            name: '',\n                            email: '',\n                            age: '',\n                            id: ''\n                        })\n                    }\n                }\n                className=\"row col-md-9\">\n                <label>Name<br/>\n                    <input type=\"text\" value={this.state.name} onChange={this.onChange} name=\"name\" className=\"m-1\" style={{backgroundColor: '#888', border: 'none', padding: '.2rem'}}/>\n                </label>\n                <label>Email<br/>\n                    <input type=\"text\" value={this.state.email} onChange={this.onChange} name=\"email\" className=\"m-1\" style={{backgroundColor: '#888', border: 'none', padding: '.2rem'}}/>\n                </label>\n                <label>Age<br/>\n                    <input type=\"text\" value={this.state.age} onChange={this.onChange} name=\"age\" className=\"m-1\" style={{backgroundColor: '#888', border: 'none', padding: '.2rem'}}/>\n                </label>\n                <label><br/>\n                <input type=\"submit\" value=\"Submit\" className=\"btn btn-secondary m-1 text-success\"/>\n                </label>\n                </form>\n                )\n                }\n                </Mutation>\n            </div>\n        )\n    }\n}\n\nexport default EditCustomer;\n","import React, { Component } from 'react';\nimport ApolloClient from 'apollo-boost';\nimport { ApolloProvider } from 'react-apollo';\nimport CustomersList from './components/CustomersList';\nimport AddCustomer from './components/AddCustomer';\nimport EditCustomer from './components/EditCustomer';\nimport './App.css';\n\nconst client = new ApolloClient({\n    uri: '/graphql'\n});\n\nexport class App extends Component {\n\n    state = {\n        id: ''\n    }\n\n    editThisCustomer = (id) => {\n\n        if (id != ''){\n\n            this.state.id = ''\n            this.setState({id: id})\n            window.scrollTo(0,0)\n\n        } else {\n\n            this.setState({id: id})\n            window.scrollTo(0,0)\n\n        }\n\n    }\n\n    render() {\n\n        return (\n            <ApolloProvider client={client}>\n            <div className=\"container\">\n                <AddCustomer />\n                {this.state.id !== '' && <EditCustomer editId={this.state.id}/>}\n                <CustomersList editCustomer={this.editThisCustomer} />\n            </div>\n            </ApolloProvider>\n        );\n\n    }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}